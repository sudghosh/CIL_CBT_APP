# docker-compose.dev.yml
version: '3.8'

# Common configurations
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck-config: &default-healthcheck
  test: ["CMD-SHELL", "echo 'default'"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 10s

services:
  postgres:
    image: postgres:15-alpine
    container_name: cil_hr_postgres
    environment:
      # Hardcoding these essential variables directly for robustness
      POSTGRES_USER: cildb
      POSTGRES_PASSWORD: cildb123
      POSTGRES_DB: cil_cbt_db
      PGDATA: /var/lib/postgresql/data/pgdata
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8"
    # Removed env_file from postgres service, as variables are now hardcoded
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: pgdata
        target: /var/lib/postgresql/data
      - ./backend/init:/docker-entrypoint-initdb.d
    networks:
      - cil-network
    healthcheck:
      # Update healthcheck to use hardcoded values
      test: ["CMD-SHELL", "pg_isready -U cildb -d cil_cbt_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *default-logging
    # Removed memory limits to allow Docker to allocate as needed
    command: sh -c "env | grep POSTGRES_PASSWORD && env | grep POSTGRES_USER && env | grep POSTGRES_DB && /usr/local/bin/docker-entrypoint.sh postgres"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: development
    env_file:
      - ./.env.dev
    environment:
      SECRET_KEY_FILE: /run/secrets/secret_key
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      GOOGLE_CLIENT_ID_FILE: /run/secrets/google_client_id
      GOOGLE_CLIENT_SECRET_FILE: /run/secrets/google_client_secret
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    ports:
      - "8000:8000"
    volumes:
      - type: bind
        source: ./backend
        target: /app
      - type: volume
        source: backend_cache
        target: /app/.cache
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cil-network
    secrets:
      - secret_key
      - google_client_id
      - google_client_secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging: *default-logging
    # Add memory limit to prevent excessive memory usage
    deploy:
      resources:
        limits:
          memory: 1G
    command: sh -c "echo 'Backend Environment Variables:' && env | grep POSTGRES_PASSWORD && env | grep DATABASE_URL && python /app/init_db.py && uvicorn src.main:app --host 0.0.0.0 --port 8000"

  frontend:
    build:
      context: ./frontend
      target: development
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      # Memory optimization settings
      - GENERATE_SOURCEMAP=false
      - NODE_OPTIONS=--max_old_space_size=1536
    networks:
      - cil-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 2G
    logging: *default-logging

volumes:
  pgdata:
    name: cil_pgdata
    driver: local
  backend_cache:
    name: cil_backend_cache
    driver: local
  node_modules:
    name: cil_node_modules
    driver: local

networks:
  cil-network:
    name: cil_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

secrets:
  secret_key:
    file: ./secrets/secret_key.txt
  google_client_id:
    file: ./secrets/google_client_id.txt
  google_client_secret:
    file: ./secrets/google_client_secret.txt